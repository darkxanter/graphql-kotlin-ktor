schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

"Is Authenticated?"
directive @auth(roles: [Role!]!) on FIELD_DEFINITION

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
) on SCALAR

"Article"
type Article {
    author: User!
    authorId: Long!
    content: String!
    created: DateTime!
    id: Long!
    title: String!
}

type Mutation {
    "Add new article"
    addArticle(input: ArticleInput!): Article!
}

type Query {
    "Hello example with auth context for admin users only"
    adminHelloWithContext: String! @auth(roles : [Admin, Manager])
    "List of articles"
    articles(limit: Int, sortOrder: SortOrder): [Article!]!
    "Hello example"
    hello: String!
    "Hello example with auth context"
    helloWithContext: String! @auth(roles : [])
    "List of users"
    users: [User!]! @auth(roles : [Admin, Manager])
}

type Subscription {
    "List of articles"
    articles(limit: Int, sortOrder: SortOrder): [Article!]!
    "Returns a random number every second"
    counter(limit: Int): Int!
    "Returns a random number every second"
    counter2(limit: Int): Int!
    "Returns a random number every second, errors if even"
    counterWithError: Int!
    "Returns a delayed value"
    delayedValue(seconds: Int!): Int!
    "Returns stream of errors"
    flowOfErrors: String
    "Returns a single value"
    singleValueSubscription: Int!
    "Returns one value then an error"
    singleValueThenError: Int!
}

"User account"
type User {
    id: Long!
    "Display name"
    name: String!
    "User role"
    role: Role! @auth(roles : [Admin, Manager])
    username: String!
}

enum Role {
    Admin
    Manager
    User
}

enum SortOrder {
    ASC
    ASC_NULLS_FIRST
    ASC_NULLS_LAST
    DESC
    DESC_NULLS_FIRST
    DESC_NULLS_LAST
}

"An RFC-3339 compliant DateTime Scalar"
scalar DateTime

"A 64-bit signed integer"
scalar Long

input ArticleInput {
    content: String!
    title: String!
}
